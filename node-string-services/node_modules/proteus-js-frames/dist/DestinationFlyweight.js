/**
 * Copyright (c) 2017-present, Netifi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 */

'use strict';

/* eslint-disable consistent-return, no-bitwise */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeDestinationFrame = encodeDestinationFrame;
exports.decodeDestinationFrame = decodeDestinationFrame;

var _ProteusFrame = require('./ProteusFrame');

var _FrameHeaderFlyweight = require('./FrameHeaderFlyweight');

var _rsocketCore = require('rsocket-core');

var FROM_DESTINATION_LENGTH_SIZE = 4;
var FROM_GROUP_LENGTH_SIZE = 4;
var TO_DESTINATION_LENGTH_SIZE = 4;
var TO_GROUP_LENGTH_SIZE = 4;

function encodeDestinationFrame(frame) {
  var fromDestinationLength = _rsocketCore.UTF8Encoder.byteLength(frame.fromDestination);
  var fromGroupLength = _rsocketCore.UTF8Encoder.byteLength(frame.fromGroup);
  var toDestinationLength = _rsocketCore.UTF8Encoder.byteLength(frame.toDestination);
  var toGroupLength = _rsocketCore.UTF8Encoder.byteLength(frame.toGroup);
  var metadataLength = _rsocketCore.BufferEncoder.byteLength(frame.metadata);

  var buffer = (0, _rsocketCore.createBuffer)(_FrameHeaderFlyweight.FRAME_HEADER_SIZE + FROM_DESTINATION_LENGTH_SIZE + fromDestinationLength + FROM_GROUP_LENGTH_SIZE + fromGroupLength + TO_DESTINATION_LENGTH_SIZE + toDestinationLength + TO_GROUP_LENGTH_SIZE + toGroupLength + metadataLength);

  var offset = (0, _FrameHeaderFlyweight.encodeFrameHeader)(buffer, frame);

  offset = buffer.writeUInt32BE(fromDestinationLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.fromDestination, buffer, offset, offset + fromDestinationLength);

  offset = buffer.writeUInt32BE(fromGroupLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.fromGroup, buffer, offset, offset + fromGroupLength);

  offset = buffer.writeUInt32BE(toDestinationLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.toDestination, buffer, offset, offset + toDestinationLength);

  offset = buffer.writeUInt32BE(toGroupLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.toGroup, buffer, offset, offset + toGroupLength);

  _rsocketCore.BufferEncoder.encode(frame.metadata, buffer, offset, offset + metadataLength);

  return buffer;
}

function decodeDestinationFrame(buffer, majorVersion, minorVersion) {
  var offset = _FrameHeaderFlyweight.FRAME_HEADER_SIZE;

  var fromDestinationLength = buffer.readUInt32BE(offset);
  offset += FROM_DESTINATION_LENGTH_SIZE;

  var fromDestination = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + fromDestinationLength);
  offset += fromDestinationLength;

  var fromGroupLength = buffer.readUInt32BE(offset);
  offset += FROM_GROUP_LENGTH_SIZE;

  var fromGroup = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + fromGroupLength);
  offset += fromGroupLength;

  var toDestinationLength = buffer.readUInt32BE(offset);
  offset += TO_DESTINATION_LENGTH_SIZE;

  var toDestination = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + toDestinationLength);
  offset += toDestinationLength;

  var toGroupLength = buffer.readUInt32BE(offset);
  offset += TO_GROUP_LENGTH_SIZE;

  var toGroup = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + toGroupLength);
  offset += toGroupLength;

  var metadata = _rsocketCore.BufferEncoder.decode(buffer, offset, buffer.length);

  return {
    type: _ProteusFrame.FrameTypes.DESTINATION,
    majorVersion: majorVersion,
    minorVersion: minorVersion,
    fromDestination: fromDestination,
    fromGroup: fromGroup,
    toDestination: toDestination,
    toGroup: toGroup,
    metadata: metadata
  };
}