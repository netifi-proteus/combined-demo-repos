/**
 * Copyright (c) 2017-present, Netifi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * 
 */

'use strict';

/* eslint-disable consistent-return, no-bitwise */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeDestinationSetupFrame = encodeDestinationSetupFrame;
exports.decodeDestinationSetupFrame = decodeDestinationSetupFrame;

var _ProteusFrame = require('./ProteusFrame');

var _FrameHeaderFlyweight = require('./FrameHeaderFlyweight');

var _rsocketCore = require('rsocket-core');

var _RSocketBufferUtils = require('rsocket-core/build/RSocketBufferUtils');

var DESTINATION_LENGTH_SIZE = 4;
var GROUP_LENGTH_SIZE = 4;
var ACCESS_KEY_SIZE = 8;
var ACCESS_TOKEN_LENGTH_SIZE = 4;

function encodeDestinationSetupFrame(frame) {
  var destinationLength = _rsocketCore.UTF8Encoder.byteLength(frame.destination);
  var groupLength = _rsocketCore.UTF8Encoder.byteLength(frame.group);
  var accessTokenLength = _rsocketCore.BufferEncoder.byteLength(frame.accessToken);

  var buffer = (0, _rsocketCore.createBuffer)(_FrameHeaderFlyweight.FRAME_HEADER_SIZE + DESTINATION_LENGTH_SIZE + destinationLength + GROUP_LENGTH_SIZE + groupLength + ACCESS_KEY_SIZE + ACCESS_TOKEN_LENGTH_SIZE + accessTokenLength);

  var offset = (0, _FrameHeaderFlyweight.encodeFrameHeader)(buffer, frame);

  offset = buffer.writeUInt32BE(destinationLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.destination, buffer, offset, offset + destinationLength);

  offset = buffer.writeUInt32BE(groupLength, offset);
  offset = _rsocketCore.UTF8Encoder.encode(frame.group, buffer, offset, offset + groupLength);

  offset = (0, _RSocketBufferUtils.writeUInt64BE)(buffer, frame.accessKey, offset);
  offset = buffer.writeUInt32BE(accessTokenLength, offset);
  _rsocketCore.BufferEncoder.encode(frame.accessToken, buffer, offset, offset + accessTokenLength);

  return buffer;
}

function decodeDestinationSetupFrame(buffer, majorVersion, minorVersion) {
  var offset = _FrameHeaderFlyweight.FRAME_HEADER_SIZE;

  var destinationLength = buffer.readUInt32BE(offset);
  offset += DESTINATION_LENGTH_SIZE;

  var destination = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + destinationLength);
  offset += destinationLength;

  var groupLength = buffer.readUInt32BE(offset);
  offset += GROUP_LENGTH_SIZE;

  var group = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + groupLength);
  offset += groupLength;

  var accessKey = (0, _RSocketBufferUtils.readUInt64BE)(buffer, offset);
  offset += ACCESS_KEY_SIZE;

  var accessTokenLength = buffer.readUInt32BE(offset);
  offset += ACCESS_TOKEN_LENGTH_SIZE;

  var accessToken = _rsocketCore.BufferEncoder.decode(buffer, offset, offset + accessTokenLength);

  return {
    type: _ProteusFrame.FrameTypes.DESTINATION_SETUP,
    majorVersion: majorVersion,
    minorVersion: minorVersion,
    destination: destination,
    group: group,
    accessKey: accessKey,
    accessToken: accessToken
  };
}