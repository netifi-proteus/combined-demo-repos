'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapToBuffer = mapToBuffer;
exports.bufferToMap = bufferToMap;
exports.trace = trace;
exports.traceAsChild = traceAsChild;

var _rsocketCore = require('rsocket-core');

var _rsocketFlowable = require('rsocket-flowable');

var _Tag = require('./Tag');

var _Tag2 = _interopRequireDefault(_Tag);

var _SpanSubscriber = require('./SpanSubscriber');

var _SpanContext = require('./SpanContext');

var _Tracer = require('./Tracer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapToBuffer(map) {
  if (!map || Object.keys(map).length <= 0) {
    return Buffer.alloc(0);
  }

  var aggregatedTags = Object.keys(map).reduce(function (aggregate, key) {
    var val = map[key];
    var keyLen = _rsocketCore.UTF8Encoder.byteLength(key);
    var keyBuf = Buffer.alloc(keyLen);
    _rsocketCore.UTF8Encoder.encode(key, keyBuf, 0, keyLen);

    var valLen = _rsocketCore.UTF8Encoder.byteLength(val);
    var valBuf = Buffer.alloc(valLen);
    _rsocketCore.UTF8Encoder.encode(val, valBuf, 0, valLen);

    var newEntries = aggregate.entries;
    newEntries.push({ keyLen: keyLen, keyBuf: keyBuf, valLen: valLen, valBuf: valBuf });

    return {
      //4 for the sizes plus the actual key and actual value
      totalSize: aggregate.totalSize + 4 + keyLen + valLen,
      entries: newEntries
    };
  }, { totalSize: 0, entries: [] });

  var offset = 0;
  var resultBuf = Buffer.alloc(aggregatedTags.totalSize);
  aggregatedTags.entries.forEach(function (entry) {
    resultBuf.writeUInt16BE(entry.keyLen, offset);
    offset += 2; //2 bytes for key length

    _rsocketCore.BufferEncoder.encode(entry.keyBuf, resultBuf, offset, offset + entry.keyLen);
    offset += entry.keyLen;

    resultBuf.writeUInt16BE(entry.valLen, offset);
    offset += 2;

    _rsocketCore.BufferEncoder.encode(entry.valBuf, resultBuf, offset, offset + entry.valLen);
    offset += entry.valLen;
  });

  return resultBuf;
}

function bufferToMap(buffer) {
  var result = {};

  var offset = 0;
  while (offset < buffer.length) {
    var keyLen = buffer.readUInt16BE(offset);
    offset += 2;

    var key = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + keyLen);
    offset += keyLen;

    var valLen = buffer.readUInt16BE(offset);
    offset += 2;

    var value = _rsocketCore.UTF8Encoder.decode(buffer, offset, offset + valLen);
    offset += valLen;

    result[key] = value;
  }

  return result;
}

function trace(tracer, name) {
  for (var _len = arguments.length, tags = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    tags[_key - 2] = arguments[_key];
  }

  if (tracer && name) {
    return function (map) {
      (function (flowable) {
        flowable.lift(function (subscriber) {
          new _SpanSubscriber.SpanSubscriber(subscriber, null, tracer, map, name, tags);
        });
      });
    };
  } else {
    return function (map) {
      (function (publisher) {
        return publisher;
      });
    };
  }
}

function traceAsChild(tracer, name) {
  for (var _len2 = arguments.length, tags = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    tags[_key2 - 2] = arguments[_key2];
  }

  if (tracer && name) {
    return function (context) {
      return function (flowable) {
        flowable.lift(function (subscriber) {
          new _SpanSubscriber.SpanSubscriber(subscriber, context, tracer, null, name, tags);
        });
      };
    };
  } else {
    return function (context) {
      (function (publisher) {
        return publisher;
      });
    };
  }
}

//
// +  public static <T>
//   +      Function<Map<String, String>, Function<? super Publisher<T>, ? extends Publisher<T>>> trace(
//   +          Tracer tracer, String name, Tag... tags) {
//     +    return map ->
//     +        Operators.lift(
//     +            (scannable, subscriber) ->
//     +                new SpanSubscriber<T>(
//     +                    subscriber, subscriber.currentContext(), tracer, map, name, tags));
//     +  }
//   +
//   +  public static <T>
//     +      Function<Map<String, String>, Function<? super Publisher<T>, ? extends Publisher<T>>>
//     +          trace() {
//       +    return map -> publisher -> publisher;
//       +  }
//     +
//     +  public static <T>
//       +      Function<SpanContext, Function<? super Publisher<T>, ? extends Publisher<T>>> traceAsChild() {
//       +    return (spanContext) -> publisher -> publisher;
//       +  }
//       +
//       +  public static <T>
//         +      Function<SpanContext, Function<? super Publisher<T>, ? extends Publisher<T>>> traceAsChild(
//         +          Tracer tracer, String name, Tag... tags) {
//           +    return (spanContext) -> {
//           +      if (spanContext == null) {
//           +        return Operators.lift(
//           +            (scannable, subscriber) ->
//           +                new SpanSubscriber<T>(
//           +                    subscriber, subscriber.currentContext(), tracer, null, name, tags));
//           +      } else {
//           +        return Operators.lift(
//           +            (scannable, subscriber) ->
//           +                new SpanSubscriber<T>(
//           +                    subscriber,
//           +                    subscriber.currentContext(),
//           +                    tracer,
//           +                    null,
//           +                    spanContext,
//           +                    name,
//           +                    tags));
//           +      }
//           +    };
//           +  }