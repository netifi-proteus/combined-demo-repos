'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanSubscriber = undefined;

var _rsocketFlowable = require('rsocket-flowable');

var _opentracing = require('opentracing');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SpanSubscriber = exports.SpanSubscriber = function (_Single) {
  _inherits(SpanSubscriber, _Single);

  function SpanSubscriber(single, tracer, name, context, tags, references, startTime) {
    _classCallCheck(this, SpanSubscriber);

    var _this = _possibleConstructorReturn(this, _Single.call(this, function (subscriber) {
      _this._subscriber = subscriber;
      single.subscribe(_this);
    }));

    _this._tracer = tracer;
    //this._single = single;

    var options = {};

    if (context) {
      options.childOf = context;
    } else if (_this._rootSpan) {
      options.childOf = context;
    }

    if (tags) {
      options.tags = tags;
    }

    if (references) {
      options.references = references;
    }

    if (startTime) {
      options.startTime = startTime;
    }

    _this._span = tracer.startSpan(name, options);
    _this._rootSpan = _this._rootSpan || _this._span;

    var adapter = new _opentracing.BinaryCarrier();
    tracer.inject(_this._span.context(), _opentracing.FORMAT_BINARY, adapter);
    return _this;
  }
  //_single: Single<T>;


  SpanSubscriber.prototype.cleanup = function cleanup() {
    this._span.finish();
  };

  SpanSubscriber.prototype.onSubscribe = function onSubscribe(cancel) {
    var _this2 = this;

    this._cancel = cancel;
    this._span.log('onSubscribe', timeInMicros());
    this._subscriber.onSubscribe(function () {
      _this2.cancel();
    });
  };

  SpanSubscriber.prototype.cancel = function cancel() {
    try {
      this._span.log('cancel', timeInMicros());
      this._cancel && this._cancel();
    } finally {
      this.cleanup();
    }
  };

  SpanSubscriber.prototype.onError = function onError(error) {
    try {
      this._span.log('onError', timeInMicros());
      this._subscriber.onError(error);
    } finally {
      this.cleanup();
    }
  };

  SpanSubscriber.prototype.onComplete = function onComplete(value) {
    try {
      this._span.log('onComplete', timeInMicros());
      this._subscriber.onComplete(value);
    } finally {
      this.cleanup();
    }
  };

  return SpanSubscriber;
}(_rsocketFlowable.Single);

function timeInMicros() {
  return Date.now() * 1000 /*microseconds*/;
}